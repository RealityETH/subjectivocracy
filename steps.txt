
Examples:

Governance update

If you're prepared to pay the cost, you can simply request a fork. However, this will be expensive and slow.
 
 * forkmanager.requestFork(0x0, newchainmanager, FORK_COST)


Start on L2

 MIN_BOND: Minimum bond for changing governance
 GOVERNANCE_TIMEOUT: Timeout for changing governance
 GOVERNANCE_TEMPLATE: A question "Should we update chainmanager to %s"
 alice: publish new chainmanager, get address newchainmanager

   * question_id = reality_eth.askQuestion(GOVERNANCE_TEMPLATE, newchainmanager, fork_arbitrator, GOVERNANCE_TIMEOUT, 0, 0)
   * reality_eth.submitAnswerERC20(question_id, 1, 0, MIN_BOND)
   ...wait to timeout
   * forkmanager.replaceWithQuestion(newchainmanager, fork_arbitrator, 7 days, , alice, 0)
     ...checks question exists and results in 1

   if dispute happened:
     * fork_arbitrator.requestArbitration(question_id, 0) 
     * forkmanager.requestFork(question_id, newchainmanager)
         tell reality.eth to pay different people on different forks



[l2 oracle]
 questi



   







L2 Reality.eth/MetaArbitrator example

Did I finish my homework? 
 Alice) Yes, 1 token
 Bob  ) No, 2 tokens
 Alice) Yes, 4 tokens
 Bob  ) No, 8 tokens
 ...
 Alice) Yes, 10000 tokens
 Bob  ) No, 20000 tokens

A) Request arbitration from MetaArbitrator, costs 15,000 tokens, plan to get answer Yes and claim 20,000+ tokens.
   Alice > MetaArbitrator.requestArbitration()

MetaArbitrator: Now has 15,000 tokens, waits for someone to send it to a whitelisted arbitrator. Charlie decides to send it to Arbitrator1, which charges 12,000 tokens. (They could even charge in another currency.) Charlie expects to get 15,000 tokens when Arbitrator1 rules, and make a profit.
   Charlie > Arbitrator1.requestArbitration() > MetaArbitrator.notifyArbitrationRequest()
   Note: MetaArbitrator looks to Reality.eth like an arbitrator, and to Arbitrator1 like Reality.eth.

Arbitrator1: Rules No. 
   Arbitrator owner (or anyone) > Arbitrator1.submitAnswerByArbitrator() -> MetaArbitrator.submitAnswerByArbitrator()

  There's now a 1 week window for anyone to challenge the arbitrator. If nobody does this, the MetaArbitrator passes the answer from Arbitrator1 on to the L2 Reality.eth and the question is settled.
   Charlie (or anyone) > MetaArbitrator.completeArbitration > RealityETH.submitAnswerByArbitrator()

But if Alice isn't satisfied, she sends another 15,000 tokens to MetaArbitrator to challenge the arbitrator. 


Anyone can then create a proposal, using her tokens as the bond.
   Alice -> MetaArbitrator.challengeArbitrator(question_id) -> l1.Fork Manager.disputeArbitrator(arbitrator) -> l1.RealityETH.askQuestion(value=15000)
    MetaArbitrator stores resulting dispute_question_id. 

 Once an arbitrator is under challenge, it will not complete until the challenge is complete.

If the proposal to remove the arbitrator fails, the question returns as False and the arbitrator remains, so anyone can tell the MetaArbitrator to submit the decision to reality.eth and Charlie gets paid.

If the proposal to remove the arbitrator succeeds, the question returns as True and the arbitrator is removed. The 15,000 token reward remains (Charlie loses the money he fronted with the bad arbitrator) and we wait for someone to submit to another arbitrator on the whitelist.

    l1.Fork Manager.l2queue.reportDisputeResult -> l1.RealityETH.getFinalResult(dispute_question_id), send to l2.MetaArbitrator.settleDispute(dispute_question_id, true)

If we went into a forking state, there are now two versions of the system, one in which the arbitrator was removed, and one in which they remain. 

  Immediately we can call:

    l1.Fork Manager.fork1l2queue.reportDisputeResult -> l2.MetaArbitrator.settleDispute(dispute_question_id, true)
    l1.Fork Manager.fork2l2queue.reportDisputeResult -> l2.MetaArbitrator.settleDispute(dispute_question_id, false)

  ...then after token voting is complete:

    l1.RealityETH.submitAnswerByArbitrator()
    



ISSUE: 
 - Token committing
   - need to get people to commit?
   - force committing, tokens only exist on L1 -> can't use them for insurance, other uses
   - committers get fees - may not be enough, eg 10% of fees too little if unclear?
     - first movers get more fees?
   - moving to L2 takes out of staked pool?
 - Token revenue
   - Also get part of fees for transactions? Each block needs a burn? How to regulate how much?
   - Whitelisted arbitrators must pay part of arbitration? 
   - Bond has a burn, but only works if token used for reality.eth 
   - Bond claim fee goes to arbitrators, arbitrator withdrawal must provide a % to tokenholders
      -> other currency also works


 - fees charged on escalations and arbitrations
   - issue: if not in the governance token how to do they get split among token-holders
    - track withdrawal dates
    - auction to burn tokens

 - How to price the MetaArbitrator

 - How to move other tokens owned by the MetaArbitrator
  
